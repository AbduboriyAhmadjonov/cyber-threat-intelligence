name: Deploy to Digital Ocean

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build Frontend
      - name: Install and Build Frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Clean previous build
        run: |
          rm -rf /var/www/cyber-threat/*

          # Create frontend directory if it doesn't exist
          mkdir -p /var/www/cyber-threat

          # Clean and prepare directory for frontend
          echo "Deploying frontend..."

          # Create dist directory locally
          mkdir -p /tmp/dist

          # Deploy GraphQL API
          echo "Deploying GraphQL API..."
          cd ~/cyber-threat-graphql-api || git clone https://github.com/${{ github.repository }}.git ~/cyber-threat-graphql-api
          cd ~/cyber-threat-graphql-api
          git pull origin main
          cd cyber-threat-graphql-api
          npm ci

          # Start/restart GraphQL API with PM2
          pm2 describe graphql-api > /dev/null || pm2 start app.js --name graphql-api
          pm2 restart graphql-api

          # Start/restart REST API with PM2
          pm2 describe rest-api > /dev/null || pm2 start index.js --name rest-api
          pm2 restart rest-api

          # Save PM2 configuration to start on reboot
          pm2 save

          # Setup PM2 to start on system boot
          pm2 startup

      # Copy built frontend files to server
      - name: Copy frontend files to Digital Ocean
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          port: ${{ secrets.DIGITALOCEAN_PORT }}
          source: 'frontend/dist/*'
          target: '/var/www/cyber-threat/'
          strip_components: 2

      # Configure Nginx and restart services
      - name: Configure Nginx and restart services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          port: ${{ secrets.DIGITALOCEAN_PORT }}
          script: |
            # Create Nginx config if it doesn't exist
            if [ ! -f /etc/nginx/sites-available/cyber-threat ]; then
              sudo tee /etc/nginx/sites-available/cyber-threat > /dev/null << 'EOF'
            server {
                listen 80;
                server_name your-domain.com;  # Replace with your actual domain
                
                root /var/www/cyber-threat;
                index index.html;
                
                location / {
                    try_files $uri $uri/ /index.html;
                }
                
                # Proxy requests to GraphQL API
                location /graphql {
                    proxy_pass http://localhost:4000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_cache_bypass $http_upgrade;
                }
                
                # Proxy requests to REST API if needed
                location /api {
                    proxy_pass http://localhost:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_cache_bypass $http_upgrade;
                }
            }
            EOF

              # Enable the site
              sudo ln -s /etc/nginx/sites-available/cyber-threat /etc/nginx/sites-enabled/ || true
            fi

            # Test Nginx configuration
            sudo nginx -t

            # Restart Nginx
            sudo systemctl restart nginx

            # Ensure PM2 processes start on reboot
            pm2 save

            echo "Deployment complete!"
